from collections import deque
n = int(input())
board = []
for _ in range(n) :
    board.append(list(map(int,input().split())))

#1을 -1로 바꿔준다
for i in range(n):
    for j in range(n):
        if board[i][j] == 1:
            board[i][j] = -1

#임시 맵을 만들고 끝쪽을 벽으로 만들자
temp = [[-1] * (n+2) for _ in range(n+2)]
for i in range(n):
    for j in range(n):
        temp[i+1][j+1] = board[i][j]


# 현재 위치에서 이동가능한 위치를 찾는 함수
def next_pos(pos) :
    next_pos = []
    pos =list(pos) #튜플 자료형을 리스트로 바꿈
    x1,y1,x2,y2 = pos[0][0], pos[0][1], pos[1][0], pos[1][1]

    #상하좌우
    dx = [0,0,1,-1]
    dy = [1,-1,0,0]
    for i in range(4) :
        nx1 = x1 +dx[i]
        nx2 = x2 + dx[i]
        ny1 = y1 + dy[i]
        ny2 = y2 + dy[i]

        #이동하고자 하는 두칸이 모두 비어있다면
        if temp[nx1][ny1] == 0 and temp[nx2][nx2] == 0 :
            next_pos.append({(nx1,ny1),(nx2,ny2)})

    #회전 가능한 곳 추가
    # 가로인경우
    if nx1 == nx2 :
        for i in [-1,1] :
            if temp[x1+i][y1] == 0 and temp[x2+i][y2] == 0 : #-1이면 위로, 1이면 아래로
                next_pos.append({(x1,y1),(x1+i,y1)})
                next_pos.append({(x2,y2),(x2+i,y2)})

    #세로인경우
    if ny1 == ny2 :
        for i in [-1,1] :
            if temp[x1][y1+i] == 0 and temp[x2][y2+i] == 0:
                next_pos.append({(x1,y1),(x1,y1+i)})
                next_pos.append({(x2,y2,), (x2,y2+i)})

    return next_pos

def solution():
    q = deque()
    visited = [] # 방문했던 칸은 다 삽입
    #출발위치
    pos = {(1,1),(1,2)}
    q.append((pos,0)) #비용을 추가
    visited.append(pos)

    #반복
    while q :
        pos,cost = q.popleft()
        print(pos,cost)
        #n,n에도착하면 끝/ q에서 n,n이 나오면 출력
        if (n,n) in pos:
            return cost

        #현재 위치에서 이동할 수 있는 위치를 찾아서 q에 넣고 다시 코스트 변경
        for next in next_pos(pos):
            if next not in visited :
                q.append((next,cost+1))
                visited.append(next)

    return 0

solution()
